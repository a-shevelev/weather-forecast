import React, { useState, useEffect } from "react";
import axios from "axios";
import "./App.css";

// –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–≥–æ–¥—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–∫–æ–Ω–∫–∏
const weatherDescriptions = {
  0: "–ß–∏—Å—Ç–æ–µ –Ω–µ–±–æ üåû",
  1: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ üå§Ô∏è",
  2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å üå•Ô∏è",
  3: "–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è",
  45: "–¢—É–º–∞–Ω üå´Ô∏è",
  48: "–û—Å–∞–¥–æ—á–Ω—ã–π —Ç—É–º–∞–Ω üå´Ô∏è",
  51: "–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å (–ª–µ–≥–∫–∏–π) üå¶Ô∏è",
  53: "–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å (—É–º–µ—Ä–µ–Ω–Ω—ã–π) üå¶Ô∏è",
  55: "–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å (–ø–ª–æ—Ç–Ω—ã–π) üåßÔ∏è",
  56: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å (–ª–µ–≥–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å) üå®Ô∏è",
  57: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å (–ø–ª–æ—Ç–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å) üå®Ô∏è",
  61: "–î–æ–∂–¥—å (–ª–µ–≥–∫–∏–π) üå¶Ô∏è",
  63: "–î–æ–∂–¥—å (—É–º–µ—Ä–µ–Ω–Ω—ã–π) üåßÔ∏è",
  65: "–î–æ–∂–¥—å (—Å–∏–ª—å–Ω—ã–π) üåßÔ∏è",
  66: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å (–ª–µ–≥–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å) üå®Ô∏è",
  67: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å (—Å–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å) üå®Ô∏è",
  71: "–°–Ω–µ–≥–æ–ø–∞–¥ (–ª–µ–≥–∫–∏–π) üå®Ô∏è",
  73: "–°–Ω–µ–≥–æ–ø–∞–¥ (—É–º–µ—Ä–µ–Ω–Ω—ã–π) üå®Ô∏è",
  75: "–°–Ω–µ–≥–æ–ø–∞–¥ (—Å–∏–ª—å–Ω—ã–π) üå®Ô∏è",
  77: "–°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞ üå®Ô∏è",
  80: "–õ–∏–≤–Ω–µ–≤—ã–µ –¥–æ–∂–¥–∏ (—Å–ª–∞–±—ã–µ) üå¶Ô∏è",
  81: "–õ–∏–≤–Ω–µ–≤—ã–µ –¥–æ–∂–¥–∏ (—É–º–µ—Ä–µ–Ω–Ω—ã–µ) üåßÔ∏è",
  82: "–õ–∏–≤–Ω–µ–≤—ã–µ –¥–æ–∂–¥–∏ (—Å–∏–ª—å–Ω—ã–µ) üåßÔ∏è",
  85: "–ù–µ–±–æ–ª—å—à–∏–µ —Å–Ω–µ–≥–æ–ø–∞–¥—ã üå®Ô∏è",
  86: "–°–∏–ª—å–Ω—ã–µ —Å–Ω–µ–≥–æ–ø–∞–¥—ã üå®Ô∏è",
  95: "–ì—Ä–æ–∑–∞ (—Å–ª–∞–±–∞—è –∏–ª–∏ —É–º–µ—Ä–µ–Ω–Ω–∞—è) ‚õàÔ∏è",
  96: "–ì—Ä–æ–∑–∞ —Å –º–µ–ª–∫–∏–º –≥—Ä–∞–¥–æ–º ‚õàÔ∏è",
  99: "–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–º ‚õàÔ∏è",
};

function App() {
  const [city, setCity] = useState("");
  const [weather, setWeather] = useState(null);
  const [error, setError] = useState(null);
  const [suggestions, setSuggestions] = useState([]);
  const [selectedCity, setSelectedCity] = useState("");
  const [loading, setLoading] = useState(false);

  const geoNamesApiKey = process.env.REACT_APP_GEONAMES_API_KEY; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á GeoNames

  const getWeather = async () => {
    setLoading(true);
    try {
      const response = await axios.get(
        `http://127.0.0.1:5000/api/weather?city=${city}`
      );
      setWeather(response.data);
      setError(null);
    } catch (err) {
      setWeather(null);
      setError(err.response.data.error);
    } finally {
      setLoading(false);
    }
  };

  const fetchSuggestions = async (query) => {
    if (query.length < 2) {
      setSuggestions([]);
      return;
    }
    try {
      const response = await fetch(
        `http://api.geonames.org/searchJSON?name=${query}&maxRows=3&lang=ru&featureClass=P&username=${geoNamesApiKey}`
      );
      const data = await response.json();
      console.log(data);
      setSuggestions(
        data.geonames.map((city) => ({
          name: city.name,
          country: city.countryName,
          id: city.geonameId,
        }))
      );
    } catch (err) {
      console.error(err);
      setSuggestions([]);
    }
  };

  useEffect(() => {
    if (city.length > 1) {
      fetchSuggestions(city);
    } else {
      setSuggestions([]);
    }
  }, [city]);

  const handleSuggestionClick = (suggestion) => {
    setCity(suggestion.name);
    setSelectedCity(suggestion.id);
    setSuggestions([]);
    getWeather(); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
  };

  return (
    <div className="App">
      <h1>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</h1>
      <div style={{ position: "relative" }}>
        <input
          type="text"
          value={city}
          onChange={(e) => setCity(e.target.value)}
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
        />

        {suggestions.length > 0 && (
          <ul className="suggestions-list">
            {suggestions.map((suggestion, index) => (
              <li key={index} onClick={() => handleSuggestionClick(suggestion)}>
                {suggestion.name}, {suggestion.country}
              </li>
            ))}
          </ul>
        )}
      </div>

      {error && <p>{error}</p>}

      {loading ? (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      ) : (
        weather && (
          <div>
            <h2>{city}</h2>

            <div className="card">
              <h3>–°–µ–π—á–∞—Å</h3>
              <p>{weather.current.temperature_2m}¬∞C</p>
              <p>{weatherDescriptions[weather.current.weathercode]}</p>
            </div>

            <h3>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞</h3>
            <div className="card-container horizontal-scroll">
              {weather.hourly.time.map((time, index) => (
                <div className="card" key={index}>
                  <p>
                    {new Date(time).toLocaleTimeString([], {
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </p>
                  <p>{weather.hourly.temperature_2m[index]}¬∞C</p>
                  <p>
                    {weatherDescriptions[weather.hourly.weathercode[index]]}
                  </p>
                </div>
              ))}
            </div>

            <h3>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 7 –¥–Ω–µ–π</h3>
            <div className="card-container">
              {weather.daily.time.map((day, index) => (
                <div className="card" key={index}>
                  <p>{new Date(day).toLocaleDateString()}</p>
                  <p>–î–Ω—ë–º: {weather.daily.temperature_2m_max[index]}¬∞C</p>
                  <p>–ù–æ—á—å—é: {weather.daily.temperature_2m_min[index]}¬∞C</p>
                  <p>{weatherDescriptions[weather.daily.weathercode[index]]}</p>
                </div>
              ))}
            </div>
          </div>
        )
      )}
    </div>
  );
}

export default App;
